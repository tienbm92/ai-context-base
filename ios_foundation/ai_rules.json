{
  "$schema": "https://json-schema.org/draft-07/schema",
  "id": "ios.ai_rules.v3",
  "version": "3.0.0",
  "last_updated": "2025-01-20",
  "_comment": "MVVM validation rules for AI code generation",
  
  "critical_rules": [
    "Animation state MUST be in @State (View), NEVER in ViewModel @Published",
    "ViewModel MUST conform to ObservableObject",
    "ViewModel MUST use @Published for business state",
    "UseCases MUST be injected via ViewModel init",
    "View MUST use @StateObject for ViewModel ownership"
  ],
  
  "code_generation_rules": {
    "viewmodel": [
      "MUST be class conforming to ObservableObject",
      "MUST use @Published for business state only",
      "MUST NOT have @Published for animations",
      "MUST inject UseCases via init",
      "MUST use async methods for async operations"
    ],
    "view": [
      "MUST use @StateObject for owned ViewModel",
      "MUST use @ObservedObject for passed ViewModel",
      "MUST use @State for animations",
      "MUST call async via Task"
    ]
  },
  
  "validation_checklist": {
    "viewmodel": [
      "Is class conforming to ObservableObject",
      "Uses @Published for business state ONLY",
      "NO @Published for animations",
      "Injects UseCases via init"
    ],
    "view": [
      "Uses @StateObject for ownership",
      "Uses @State for animations",
      "NO animation in ViewModel"
    ]
  },
  
  "anti_patterns": [
    "Putting animation in ViewModel @Published",
    "Using @StateObject for passed ViewModel",
    "Not using weak self in closures"
  ]
}
